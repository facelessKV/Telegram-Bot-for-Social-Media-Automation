import os
import logging
import datetime
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from social_api import TwitterAPI
from scheduler import PostScheduler
from db_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_PLATFORM, TYPING_MESSAGE, UPLOADING_MEDIA, SCHEDULING = range(4)

# –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_TOKEN")

# –¢–æ–∫–µ–Ω—ã –¥–ª—è Twitter API
TWITTER_API_KEY = os.environ.get("TWITTER_API_KEY", "YOUR_TWITTER_API_KEY")
TWITTER_API_SECRET = os.environ.get("TWITTER_API_SECRET", "YOUR_TWITTER_SECRET")
TWITTER_ACCESS_TOKEN = os.environ.get("TWITTER_ACCESS_TOKEN", "YOUR_TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_SECRET = os.environ.get("TWITTER_ACCESS_SECRET", "YOUR_TWITTER_ACCESS_SECRET")

class SocialMediaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è Telegram-–±–æ—Ç–∞, —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, API —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        self.db_manager = DatabaseManager("social_posts.db")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –¥–ª—è Twitter
        self.twitter_api = TwitterAPI(
            TWITTER_API_KEY,
            TWITTER_API_SECRET,
            TWITTER_ACCESS_TOKEN,
            TWITTER_ACCESS_SECRET
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        self.scheduler = PostScheduler(self.db_manager, self.twitter_api)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.user_data = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "/new_post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "/schedule - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "/delete_post - –£–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await update.message.reply_text(
            "üì± *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö* üì±\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/new_post - –°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
            "/schedule - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "/scheduled - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "/delete_post - –£–¥–∞–ª–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n"
            "- Twitter (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ)\n\n"
            "*–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n"
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
            parse_mode="Markdown"
        )

    async def new_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        keyboard = [
            [InlineKeyboardButton("Twitter", callback_data="platform_twitter")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        user_id = update.effective_user.id
        self.user_data[user_id] = {
            "platform": None,
            "text": None,
            "media_path": None,
            "media_type": None
        }
        
        return CHOOSING_PLATFORM

    async def platform_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        chosen_platform = query.data.split("_")[1]
        
        self.user_data[user_id]["platform"] = chosen_platform
        
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {chosen_platform.capitalize()}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        )
        
        return TYPING_MESSAGE

    async def receive_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.user_data[user_id]["text"] = message_text
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ", callback_data="add_media")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?",
            reply_markup=reply_markup
        )
        
        return UPLOADING_MEDIA

    async def media_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "skip_media":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
                [InlineKeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ?",
                reply_markup=reply_markup
            )
            return SCHEDULING
        else:
            await query.edit_message_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª):"
            )
            return UPLOADING_MEDIA

    async def receive_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞."""
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        if update.message.photo:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_id = update.message.photo[-1].file_id
            media_type = "photo"
        elif update.message.video:
            file_id = update.message.video.file_id
            media_type = "video"
        elif update.message.document:
            file_id = update.message.document.file_id
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
            mime_type = update.message.document.mime_type
            if mime_type and mime_type.startswith("image"):
                media_type = "photo"
            elif mime_type and mime_type.startswith("video"):
                media_type = "video"
            else:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ."
                )
                return UPLOADING_MEDIA
        else:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ."
            )
            return UPLOADING_MEDIA
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(file_id)
        file_path = f"media/user_{user_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("media", exist_ok=True)
        
        if media_type == "photo":
            file_path += ".jpg"
        else:
            file_path += ".mp4"
        
        await file.download_to_drive(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Ç–∏–ø
        self.user_data[user_id]["media_path"] = file_path
        self.user_data[user_id]["media_type"] = media_type
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
            [InlineKeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_post")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ?",
            reply_markup=reply_markup
        )
        
        return SCHEDULING

    async def schedule_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "publish_now":
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å
            post_data = self.user_data[user_id]
            platform = post_data["platform"]
            text = post_data["text"]
            media_path = post_data["media_path"]
            media_type = post_data["media_type"]
            
            await query.edit_message_text("–ü—É–±–ª–∏–∫—É—é –≤–∞—à –ø–æ—Å—Ç...")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if platform == "twitter":
                if media_path:
                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
                    result = self.twitter_api.post_with_media(text, media_path, media_type)
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                    result = self.twitter_api.post_text(text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result["success"]:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    self.db_manager.add_post(
                        user_id,
                        platform,
                        text,
                        media_path,
                        result["post_id"],
                        "published"
                    )
                    
                    await query.edit_message_text(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {platform.capitalize()}!\n\n"
                        f"ID –ø–æ—Å—Ç–∞: {result['post_id']}\n"
                        f"–°—Å—ã–ª–∫–∞: {result.get('post_url', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}"
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {platform.capitalize()}:\n"
                        f"{result['error']}"
                    )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_data[user_id]
            return ConversationHandler.END
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
            await query.edit_message_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
            )
            return SCHEDULING

    async def receive_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        user_id = update.effective_user.id
        schedule_text = update.message.text
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            schedule_datetime = datetime.datetime.strptime(schedule_text, "%d.%m.%Y %H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            if schedule_datetime <= datetime.datetime.now():
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"
                )
                return SCHEDULING
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = self.user_data[user_id]
            platform = post_data["platform"]
            text = post_data["text"]
            media_path = post_data["media_path"]
            media_type = post_data["media_type"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            post_id = self.db_manager.add_scheduled_post(
                user_id,
                platform,
                text,
                media_path,
                media_type,
                schedule_datetime
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.schedule_post(post_id, schedule_datetime)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_datetime = schedule_datetime.strftime("%d.%m.%Y –≤ %H:%M")
            
            await update.message.reply_text(
                f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {formatted_datetime}!\n\n"
                f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.capitalize()}\n"
                f"ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_id}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /scheduled"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_data[user_id]
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
            )
            return SCHEDULING

    async def show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        posts = self.db_manager.get_user_posts(user_id)
        
        if not posts:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n\n"
        
        for i, post in enumerate(posts, 1):
            post_id, platform, text, media_path, social_post_id, status, created_at = post
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if len(text) > 50:
                text = text[:47] + "..."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ
            post_info = (
                f"*{i}. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform.capitalize()}\n"
                f"*ID:* {social_post_id}\n"
                f"*–°—Ç–∞—Ç—É—Å:* {status}\n"
                f"*–î–∞—Ç–∞:* {created_at}\n"
                f"*–¢–µ–∫—Å—Ç:* {text}\n\n"
            )
            
            history_text += post_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–¥–∞–ª–µ–Ω–∏—é
        history_text += (
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/delete_post [ID –ø–æ—Å—Ç–∞]"
        )
        
        await update.message.reply_text(
            history_text,
            parse_mode="Markdown"
        )

    async def show_scheduled(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        scheduled_posts = self.db_manager.get_scheduled_posts(user_id)
        
        if not scheduled_posts:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
        scheduled_text = "üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        
        for i, post in enumerate(scheduled_posts, 1):
            post_id, platform, text, media_path, media_type, scheduled_time = post
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if len(text) > 50:
                text = text[:47] + "..."
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            formatted_time = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
            post_info = (
                f"*{i}. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform.capitalize()}\n"
                f"*ID:* {post_id}\n"
                f"*–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:* {formatted_time}\n"
                f"*–¢–µ–∫—Å—Ç:* {text}\n\n"
            )
            
            scheduled_text += post_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        scheduled_text += (
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/cancel_scheduled [ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]"
        )
        
        await update.message.reply_text(
            scheduled_text,
            parse_mode="Markdown"
        )

    async def delete_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞."""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /delete_post 123456789"
            )
            return
        
        user_id = update.effective_user.id
        post_id = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        post = self.db_manager.get_post_by_id(user_id, post_id)
        
        if not post:
            await update.message.reply_text(
                f"‚ùå –ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        platform = post[1]
        social_post_id = post[4]
        
        if platform == "twitter":
            result = self.twitter_api.delete_post(social_post_id)
            
            if result["success"]:
                # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                self.db_manager.delete_post(user_id, post_id)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ {platform.capitalize()}!"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ {platform.capitalize()}:\n"
                    f"{result['error']}"
                )
        else:
            await update.message.reply_text(
                f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
            )

    async def cancel_scheduled(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /cancel_scheduled 123"
            )
            return
        
        user_id = update.effective_user.id
        post_id = int(context.args[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        post = self.db_manager.get_scheduled_post_by_id(user_id, post_id)
        
        if not post:
            await update.message.reply_text(
                f"‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
            )
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        self.scheduler.cancel_scheduled_post(post_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_manager.delete_scheduled_post(user_id, post_id)
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!"
        )

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        await update.message.reply_text(
            "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ "
            "/help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        
        return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = SocialMediaBot()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new_post", bot.new_post)],
        states={
            CHOOSING_PLATFORM: [
                CallbackQueryHandler(bot.platform_choice, pattern=r"^platform_")
            ],
            TYPING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_text)
            ],
            UPLOADING_MEDIA: [
                CallbackQueryHandler(bot.media_choice, pattern=r"^(skip_media|add_media)$"),
                MessageHandler(
                    filters.PHOTO | filters.VIDEO | filters.Document.ALL,
                    bot.receive_media
                )
            ],
            SCHEDULING: [
                CallbackQueryHandler(bot.schedule_choice, pattern=r"^(publish_now|schedule_post)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_schedule)
            ]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("history", bot.show_history))
    application.add_handler(CommandHandler("scheduled", bot.show_scheduled))
    application.add_handler(CommandHandler("delete_post", bot.delete_post))
    application.add_handler(CommandHandler("cancel_scheduled", bot.cancel_scheduled))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
    bot.scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()